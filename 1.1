Exercise 1.1

10
12
8
3
6
#unspecified (a is now 3)
#unspecified (b is now 4)
19
#f
4
16
6
16

Exercise 1.2

(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5))))) (* 3 (- 6 2) (- 2 7)))

Exercise 1.3

(define (sumTwoLargestSquares a b c)
  (define (square x) (* x x))
  (apply +
    (map square
      (list (max a b) (max (min a b) c)))))

Exercise 1.4

If b (the second argument) is positive it is added to a.  If it is negative
it is subtracted from a.  In effect, it adds the absolute value of b to a.
It does this by returning either the + or - operator as the function to apply
to the two arguments.

Exercise 1.5

The function p is infinitely recursive.  If it is ever evaluated, the program
will go into an infinite loop and never halt.  In applicative-order evaluation,
since the operands are evaluated first and p is an operand of test, the
infinite loop will be triggered.  In normal order this will not happen because
the code will be expanded until p is an operand of the if special form. That
will evaluate its first operand, find it to be true and not progress to
evaluate the second

Exercise 1.6

Alyssa's new-if function will cause the program to recur infinitely.  This is
because (sqrt-iter (improve guess x) x) is passed as an operand to new-if and
in Scheme's applicative-order evaluation, will be evaluated before new-if is
applied to the result.  Scheme functions do not have the lazy evaluation
properties of the if special form.

Exercise 1.7

The good-enough function accepts approximate results whose square differs from
the original number by a fixed amount: 0.001.  For the square root of 2 this
represents a tiny error measured as a percentage of the actual value.  For the
square root of 0.002, good-enough would accept answers which were practically
the square roots of 0.001 or 0.003.  So the smaller the numbers used, the
larger the proportional error becomes, to the point of absurdity.

This might suggest that the larger the numbers, the better the result.
Unfortunately, digital computers are strictly limited in the precision of the
answers they can give in anything but simple power of two arithmetic.  This
means that there is a granularity to the results of floating point arithmetic.
With large numbers, the actual size of the granularity increases to the point
where, in the sqrt-iter function, the recursion could never terminate because
it would be impossible to approach the answer within a 0.001 difference.  For
example, using SCM the square root of 10000000000000 evaluates to
3162277.6601683795, which when squared evaluates to 10000000000000.002, an
answer which is not good-enough.  However, simple experimentation with
marginally smaller square root values can only square to 9999999999999.996.  It
is not possible, with that Scheme implementation, to describe a number which
will square to within 0.001 of the desired result.
