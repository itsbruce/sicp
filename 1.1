Exercise 1.1

10
12
8
3
6
#unspecified (a is now 3)
#unspecified (b is now 4)
19
#f
4
16
6
16

Exercise 1.2

(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5))))) (* 3 (- 6 2) (- 2 7)))

Exercise 1.3

(define (sumTwoLargestSquares a b c)
  (define (square x) (* x x))
  (apply +
    (map square
      (list (max a b) (max (min a b) c)))))

Exercise 1.4

If b (the second argument) is positive it is added to a.  If it is negative
it is subtracted from a.  In effect, it adds the absolute value of b to a.
It does this by returning either the + or - operator as the function to apply
to the two arguments.

Exercise 1.5

The function p is infinitely recursive.  If it is ever evaluated, the program
will go into an infinite loop and never halt.  In applicative-order evaluation,
since the operands are evaluated first and p is an operand of test, the
infinite loop will be triggered.  In normal order this will not happen because
the code will be expanded until p is an operand of the if special form. That
will evaluate its first operand, find it to be true and not progress to
evaluate the second

